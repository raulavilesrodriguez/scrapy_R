print(area_2)
properties_area <- c(
properties_area,
area_2
)
View(properties_area)
library(tidyverse)
library(rvest)
library(httr)
# list of files in a Directory
pages <- (list.files(path = 'data/', pattern = '.html', all.files = TRUE, full.names = TRUE, recursive=FALSE))
# order for Date
file_info <- file.info(pages)
file_info <- file_info[with(file_info, order(as.POSIXct(mtime))), ]
pages_ordered <- rownames(file_info)
# List of Projects in Development
development_titulos <- list()
development_precios <- list()
development_area <- list()
development_links <- list()
# List of Properties Finished
properties_titulos <- list()
properties_precios <- list()
properties_area <- list()
properties_links <- list()
pages_ordered <- list(pages_ordered)
# ....SCRAPY OF EACH PAGE....
# Location of PROPERTY FINISHIED
list_location_properties <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
print(data |> html_elements(xpath = '//div/div[@class="sc-ge2uzh-1 gFoERJ"]'))
titulos_property <- data |> html_elements(xpath = '//div/div[@class="sc-ge2uzh-1 gFoERJ"]')
properties_titulos <- c(
properties_titulos,
titulos_property |> html_text2()
)
})
# price of PROPERTY FINISHIED
list_price_properties <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
price <- data |> html_elements(xpath = '//div/div[@data-qa="POSTING_CARD_PRICE"]')
print(price)
properties_precios <- c(
properties_precios,
price |> html_text2()
)
})
# features AREA of PROPERTY FINISHIED
list_area_properties <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
features_2 <- data |> html_elements(xpath = '//div/div[@data-qa="POSTING_CARD_FEATURES"]')
area_2 <- features_2 |> html_text2()
print(area_2)
properties_area <- c(
properties_area,
area_2
)
})
# links of PROPERTY FINISHIED
list_links_properties <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
links_2 <- data |> html_elements(xpath = '//div/div[@data-qa="posting PROPERTY"]') |> html_attr('data-to-posting')
print(links_2)
properties_links <- c(
properties_links,
links_2
)
})
# converting the list containg the scraped data into tibble
df_properties <- tibble(
unlist(list_location_properties),
unlist(list_price_properties),
unlist(list_area_properties),
unlist(list_links_properties)
)
unlist(list_location_properties)
ubicacion <- unlist(list_location_properties)
caracteristicas <- unlist(list_area_properties)
library(tidyverse)
library(rvest)
library(httr)
# list of files in a Directory
pages <- (list.files(path = 'data/', pattern = '.html', all.files = TRUE, full.names = TRUE, recursive=FALSE))
# order for Date
file_info <- file.info(pages)
file_info <- file_info[with(file_info, order(as.POSIXct(mtime))), ]
pages_ordered <- rownames(file_info)
# List of Projects in Development
development_titulos <- list()
development_precios <- list()
development_area <- list()
development_links <- list()
# List of Properties Finished
properties_titulos <- list()
properties_precios <- list()
properties_area <- list()
properties_links <- list()
pages_ordered <- list(pages_ordered)
# ....SCRAPY OF EACH PAGE....
# Location of PROPERTY FINISHIED
list_location_properties <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
print(data |> html_elements(xpath = '//div/div[@class="sc-ge2uzh-1 gFoERJ"]'))
titulos_property <- data |> html_elements(xpath = '//div/div[@class="sc-ge2uzh-1 gFoERJ"]')
properties_titulos <- c(
properties_titulos,
titulos_property |> html_text2()
)
})
# price of PROPERTY FINISHIED
list_price_properties <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
price <- data |> html_elements(xpath = '//div/div[@data-qa="POSTING_CARD_PRICE"]')
print(price)
properties_precios <- c(
properties_precios,
price |> html_text2()
)
})
# features AREA of PROPERTY FINISHIED
list_area_properties <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
features_2 <- data |> html_elements(xpath = '//div/div[@class="sc-i1odl-5 eodGhu"]')
area_2 <- features_2 |> html_text2()
print(area_2)
properties_area <- c(
properties_area,
area_2
)
})
# links of PROPERTY FINISHIED
list_links_properties <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
links_2 <- data |> html_elements(xpath = '//div/div[@data-qa="posting PROPERTY"]') |> html_attr('data-to-posting')
print(links_2)
properties_links <- c(
properties_links,
links_2
)
})
# converting the list containg the scraped data into tibble
df_properties <- tibble(
unlist(list_location_properties),
unlist(list_price_properties),
unlist(list_area_properties),
unlist(list_links_properties)
)
library(tidyverse)
library(rvest)
library(httr)
#______SCRAPY WEB_______
# Algoritm to download all pages
set.seed(1)
page_id <- 0
# list of files in a Directory
pages <- (list.files(path = 'data/', pattern = '.html', all.files = TRUE, full.names = TRUE, recursive=FALSE))
# order for Date
file_info <- file.info(pages)
file_info <- file_info[with(file_info, order(as.POSIXct(mtime))), ]
pages_ordered <- rownames(file_info)
# List of Projects in Development
development_titulos <- list()
development_precios <- list()
development_area <- list()
development_links <- list()
# List of Properties Finished
properties_titulos <- list()
properties_precios <- list()
properties_area <- list()
properties_links <- list()
pages_ordered <- list(pages_ordered)
list_total <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
caracteristicas <- data |> html_elements(xpath = '//div/div[@data-qa="posting PROPERTY"]') |> html_text2()
properties_titulos <- c(
properties_titulos,
caracteristicas
)
})
lista <- list()
data <-read_html('data/page-1.html', encoding="UTF-8")
lista <- list()
data <-read_html('data/page-1.html', encoding="UTF-8")
caracteristicas <- data |> html_elements(xpath = '//div/div[@data-qa="posting PROPERTY"]') |> html_text2()
lista <- c(
lista,
caracteristicas
)
View(lista)
lista[[1]]
# ....SCRAPY OF EACH PAGE....
list_total <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
caracteristicas <- data |> html_elements(xpath = '//div/div[@data-qa="posting PROPERTY"]') |> html_text2()
print(caracteristicas)
properties_titulos <- c(
properties_titulos,
caracteristicas
)
})
df <- tibble(
unlist(list_total)
)
names(df) <- c('total')
View(df)
# links of PROPERTY FINISHIED
list_links_properties <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
links_2 <- data |> html_elements(xpath = '//div/div[@data-qa="posting PROPERTY"]') |> html_attr('data-to-posting')
print(links_2)
properties_links <- c(
properties_links,
links_2
)
})
df <- tibble(
unlist(list_total),
unlist(list_links_properties)
)
names(df) <- c('total', 'links')
df_properties <- tibble(
unlist(list_total),
unlist(list_links_properties)
)
names(df_properties) <- c('total', 'links')
View(df_properties)
# Total characteristics of PROPERTY DEVELOPMENT
list_development <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
caracteristicas <- data |> html_elements(xpath = '//div/div[@data-qa="posting DEVELOPMENT"]') |> html_text2()
print(caracteristicas)
development_titulos <- c(
development_titulos,
caracteristicas
)
})
# links of DEVELOPMENT
list_links_development <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
links_1 <- data |> html_elements(xpath = '//div/div[@data-qa="posting DEVELOPMENT"]') |> html_attr('data-to-posting')
print(links_1)
development_links <- c(
development_links,
links_1
)
})
# converting the list containg the scraped data into tibble
df_development <- tibble(
unlist(list_development),
unlist(list_links_development)
)
names(df_development) <- c('total','link')
View(df_development)
View(df_development)
library(tidyverse)
library(rvest)
library(httr)
library(readxl)
library(stringr)
#______SCRAPY WEB_______
# Algoritm to download all pages
set.seed(1)
# list of files in a Directory
pages <- (list.files(path = 'data/', pattern = '.html', all.files = TRUE, full.names = TRUE, recursive=FALSE))
# order for Date of creation
file_info <- file.info(pages)
file_info <- file_info[with(file_info, order(as.POSIXct(mtime))), ]
pages_ordered <- rownames(file_info)
# List of Projects in Development
development_titulos <- list()
development_links <- list()
# List of Properties Finished
properties_titulos <- list()
properties_links <- list()
pages_ordered <- list(pages_ordered)
# ....SCRAPY OF EACH PAGE....
# Total characteristics of PROPERTY FINISHIED
list_total <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
caracteristicas <- data |> html_elements(xpath = '//div/div[@data-qa="posting PROPERTY"]') |> html_text2()
print(caracteristicas)
properties_titulos <- c(
properties_titulos,
caracteristicas
)
})
# links of PROPERTY FINISHIED
list_links_properties <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
links_2 <- data |> html_elements(xpath = '//div/div[@data-qa="posting PROPERTY"]') |> html_attr('data-to-posting')
print(links_2)
properties_links <- c(
properties_links,
links_2
)
})
# converting the list containg the scraped data into tibble
df_properties <- tibble(
unlist(list_total),
unlist(list_links_properties)
)
names(df_properties) <- c('total', 'links')
# Total characteristics of PROPERTY IN DEVELOPMENT
list_development <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
caracteristicas <- data |> html_elements(xpath = '//div/div[@data-qa="posting DEVELOPMENT"]') |> html_text2()
print(caracteristicas)
development_titulos <- c(
development_titulos,
caracteristicas
)
})
# links of PROPERTY IN DEVELOPMENT
list_links_development <- sapply(pages_ordered[[1]], function(page){
print(page)
data <-read_html(page, encoding="UTF-8")
links_1 <- data |> html_elements(xpath = '//div/div[@data-qa="posting DEVELOPMENT"]') |> html_attr('data-to-posting')
print(links_1)
development_links <- c(
development_links,
links_1
)
})
# converting the list containg the scraped data into tibble
df_development <- tibble(
unlist(list_development),
unlist(list_links_development)
)
names(df_development) <- c('total','link')
#____________Wrangling____________
#Export tibble
writexl::write_xlsx(df_properties, 'properties.xlsx')
writexl::write_xlsx(df_development, 'development.xlsx')
df_properties <- read_excel('properties.xlsx')
df_development <- read_excel('development.xlsx')
View(df_development)
View(df_properties)
df_properties <- df_properties |> mutate(valor = str_detect(total,
regex("^USD\\s*(\\d+\\.\\d+)$")))
df_properties <- df_properties |> mutate(valor = str_detect(total,
regex("^USD\\s*\\d+\\.\\d+")))
df_properties <- df_properties |> mutate(valor = extract(str_detect(total,
regex("^USD\\s*\\d+\\.\\d+"))))
df_properties <- df_properties |> mutate(valor = str_extract(total,
regex("^USD\\s*\\d+\\.\\d+")))
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")))
df_properties$total[1]
str_split(df_properties$total[1], '\n')
library(tidyverse)
library(rvest)
library(httr)
library(readxl)
library(stringr)
#____________Wrangling____________
#Export tibble
writexl::write_xlsx(df_properties, 'properties.xlsx')
writexl::write_xlsx(df_development, 'development.xlsx')
df_properties <- read_excel('properties.xlsx')
df_development <- read_excel('development.xlsx')
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")))
str_split(df_properties$total[1], '\n')
str_split(df_properties$total[1], '\n')[1]
str_split(df_properties$total[1], '\n')[[1]]
we <- str_split(df_properties$total[1], '\n')
we
we[1]
we <- c(we)
we
View(we)
we[[1]]
we[[1]][1]
we[[1]][12]
we[[1]][2]
we[[1]][8]
str_split(df_properties$total[1], '\n')
we[[1]][2]
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
x1 = c(str_split(df_properties$total, '\n'))[[1]][2])
we[[1]][2]
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
x1 = c(str_split(df_properties$total, '\n'))[[1]])
c(str_split(df_properties$total, '\n'))[[1]]
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
x1 = c(str_split(total, '\n'))[[1]][2])
str_split(df_properties$total[2], '\n')
str_split(df_properties$total, '\n')
str_split(df_properties$total, '\n')[[1]][2]
str_split(df_properties$total, '\n')[[1]]
str_split(df_properties$total, '\n')
str_split(df_properties$total, '\n')[1]
str_split(df_properties$total, '\n')[2]
we <- str_split(df_properties$total, '\n')
we
library(purrr)
map_chr(we,1)
we <- str_split(df_properties$total, '\n')
map_chr(we,1)
map_chr(we,2)
map_chr(we,3)
map_chr(we,4)
map_chr(we,5)
library(tidyverse)
library(rvest)
library(httr)
library(readxl)
library(stringr)
library(purrr)
#____________Wrangling____________
#Export tibble
writexl::write_xlsx(df_properties, 'properties.xlsx')
writexl::write_xlsx(df_development, 'development.xlsx')
df_properties <- read_excel('properties.xlsx')
df_development <- read_excel('development.xlsx')
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")))
we <- str_split(df_properties$total, '\n')
we
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("^USD\\s*\\d+\\.?\\d*\\s+Condominio/Alícuota$")))
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("^USD\\s*\\d+\\.?\\d*\\s+Condominio")))
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("^USD\\s*\\d+\\.?\\d*\\s+[Condominio]")))
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("^USD\\s*\\d+\\.?\\d*\\s+[Condominio/Alícuota]")))
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("^USD\\s*\\d+\\s+[Condominio/Alícuota]")))
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("^USD\\s*\\d+\\s+")))
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("(?i)Condominio/Alícuota")))
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("USD\\s*\\d+\\s*(?i)Condominio/Alícuota")))
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("USD\\s*\\d+\\s*Condominio/Alícuota")))
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("USD\\s*\\d+\\s*(?i)Condominio/Alícuota")))
View(df_properties)
#____________Wrangling____________
#Export tibble
writexl::write_xlsx(df_properties, 'properties.xlsx')
df_properties <- read_excel('properties.xlsx')
df_development <- read_excel('development.xlsx')
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("USD\\s*\\d+\\s*(?i)Condominio/Alícuota")))
we <- str_split(df_properties$total, '\n')
View(df_properties)
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("USD\\s*\\d+\\s*(?i)Condominio/Alícuota")))
df_properties <- read_excel('properties.xlsx')
df_development <- read_excel('development.xlsx')
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("USD\\s*\\d+\\s*(?i)Condominio/Alícuota")))
we <- str_split(df_properties$total, '\n')
View(df_properties)
we
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("USD\\s*\\d+\\s*(?i)Condominio/Alícuota")),
area = str_extract(total, regex("\\d+\\s*(?i)m²")))
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("USD\\s*\\d+\\s*(?i)Condominio/Alícuota")),
area = str_extract(total, regex("\\d+\\s*(?i)m²")),
habitaciones = str_extract(total, regex("\\d+\\s*(?i)hab.")))
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("USD\\s*\\d+\\s*(?i)Condominio/Alícuota")),
area = str_extract(total, regex("\\d+\\s*(?i)m²")),
habitaciones = str_extract(total, regex("\\d+\\s*(?i)hab.")),
baños = str_extract(total, regex("\\d+\\s*(?i)baños")))
df_properties <- df_properties |>
mutate(valor = str_extract(total, regex("^USD\\s*\\d+\\.\\d+\\.?\\d*")),
alicuota = str_extract(total, regex("USD\\s*\\d+\\s*(?i)Condominio/Alícuota")),
area = str_extract(total, regex("\\d+\\s*(?i)m²")),
habitaciones = str_extract(total, regex("\\d+\\s*(?i)hab.")),
baños = str_extract(total, regex("\\d+\\s*(?i)baños")),
estacionamientos = str_extract(total, regex("\\d+\\s*(?i)estac.")))
